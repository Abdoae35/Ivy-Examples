/*
This code was generated by an AI model for seeding a database using the Bogus library. 
When debugging read 'DataContext.cs' first to understand the structure of the database.
Your primary goal is to make the generated code compile and run successfully. 
If you fail you are allowed to regenerate the code and/or comment out functionality, but only as a last resort.
*/

using Bogus;
using Microsoft.EntityFrameworkCore;

namespace Vc;

public class DataSeeder(DataContext context) : IDataSeeder
{
    public async System.Threading.Tasks.Task SeedAsync()
    {        
        var industryNames = new[] { "Technology", "Healthcare", "Finance", "Consumer Goods", "Education", "Energy", "Blockchain", "SaaS", "Biotech", "Ecommerce" };
        var industries = industryNames.Select((name, index) => new Industry
        {
            Name = name,
            CreatedAt = DateTime.UtcNow.AddMonths(-3),
            UpdatedAt = DateTime.UtcNow.AddMonths(-2)
        }).ToList();
        context.Industries.AddRange(industries);
        await context.SaveChangesAsync();

        var startups = new Faker<Startup>()
            .RuleFor(s => s.Name, f => f.Company.CompanyName())
            .RuleFor(s => s.Description, f => f.Lorem.Paragraph())
            .RuleFor(s => s.FoundedAt, f => f.Date.Past(10))
            .RuleFor(s => s.CreatedAt, f => f.Date.Past(1))
            .RuleFor(s => s.UpdatedAt, (f, s) => s.CreatedAt.AddMonths(f.Random.Int(0, 3)))
            .Generate(50);
        context.Startups.AddRange(startups);
        await context.SaveChangesAsync();

        var founders = new Faker<Founder>()
            .RuleFor(f => f.FirstName, f => f.Name.FirstName())
            .RuleFor(f => f.LastName, f => f.Name.LastName())
            .RuleFor(f => f.Email, (f, founder) => f.Internet.Email(founder.FirstName, founder.LastName))
            .RuleFor(f => f.GenderId, f => f.Random.Int(1, 4))
            .RuleFor(f => f.CreatedAt, f => f.Date.Past(1))
            .RuleFor(f => f.UpdatedAt, (f, founder) => founder.CreatedAt.AddMonths(f.Random.Int(0, 3)))
            .Generate(200);
        context.Founders.AddRange(founders);
        await context.SaveChangesAsync();

        var startupFounderRelations = new List<StartupFounder>();
        var faker = new Faker();
        foreach (var startup in startups)
        {
            var count = faker.Random.Int(1, 5);
            var selectedFounders = new HashSet<int>();
            for (int i = 0; i < count && selectedFounders.Count < founders.Count; i++)
            {
                var founder = faker.PickRandom(founders);
                if (selectedFounders.Add(founder.Id))
                {
                    startupFounderRelations.Add(new StartupFounder
                    {
                        StartupId = startup.Id,
                        FounderId = founder.Id
                    });
                }
            }
        }
        context.StartupFounders.AddRange(startupFounderRelations);
        await context.SaveChangesAsync();

        var partners = new Faker<Partner>()
            .RuleFor(p => p.FirstName, f => f.Name.FirstName())
            .RuleFor(p => p.LastName, f => f.Name.LastName())
            .RuleFor(p => p.Email, (f, partner) => f.Internet.Email(partner.FirstName, partner.LastName))
            .RuleFor(p => p.GenderId, f => f.Random.Int(1, 4))
            .RuleFor(p => p.CreatedAt, f => f.Date.Past(1))
            .RuleFor(p => p.UpdatedAt, (f, partner) => partner.CreatedAt.AddMonths(f.Random.Int(0, 3)))
            .Generate(30);
        context.Partners.AddRange(partners);
        await context.SaveChangesAsync();

        var deals = new Faker<Deal>()
            .RuleFor(d => d.StartupId, f => f.PickRandom(startups).Id)
            .RuleFor(d => d.Round, f => f.PickRandom(new[] { "Seed", "Series A", "Series B", "Series C", "IPO" }))
            .RuleFor(d => d.Amount, f => f.Finance.Amount(100_000, 10_000_000))
            .RuleFor(d => d.DealDate, f => f.Date.Past(2))
            .RuleFor(d => d.CreatedAt, f => f.Date.Past(1))
            .RuleFor(d => d.UpdatedAt, (f, deal) => deal.CreatedAt.AddMonths(f.Random.Int(0, 3)))
            .Generate(100);
        context.Deals.AddRange(deals);
        await context.SaveChangesAsync();

        var partnerDealRelations = new List<PartnerDeal>();
        foreach (var deal in deals)
        {
            var count = faker.Random.Int(1, 3);
            var selectedPartners = new HashSet<int>();
            for (int i = 0; i < count && selectedPartners.Count < partners.Count; i++)
            {
                var partner = faker.PickRandom(partners);
                if (selectedPartners.Add(partner.Id))
                {
                    partnerDealRelations.Add(new PartnerDeal
                    {
                        DealId = deal.Id,
                        PartnerId = partner.Id
                    });
                }
            }
        }
        context.PartnerDeals.AddRange(partnerDealRelations);
        await context.SaveChangesAsync();

        var startupIndustryRelations = new List<StartupIndustry>();
        foreach (var startup in startups)
        {
            var count = faker.Random.Int(1, 3);
            var selectedIndustries = new HashSet<int>();
            for (int i = 0; i < count && selectedIndustries.Count < industries.Count; i++)
            {
                var industry = faker.PickRandom(industries);
                if (selectedIndustries.Add(industry.Id))
                {
                    startupIndustryRelations.Add(new StartupIndustry
                    {
                        StartupId = startup.Id,
                        IndustryId = industry.Id
                    });
                }
            }
        }
        context.StartupIndustries.AddRange(startupIndustryRelations);
        await context.SaveChangesAsync();
    }
}